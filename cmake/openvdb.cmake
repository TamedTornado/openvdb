#
# Build openvdb common
#

SET(OPENVDB_SOURCE_DIR ${PROJECT_SOURCE_DIR}/openvdb)

# Include here after the directories are defined so that the platform specific file can use the variables.
include(${PROJECT_CMAKE_FILES_DIR}/${TARGET_BUILD_PLATFORM}/openvdb.cmake)

FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system thread )
FIND_PACKAGE ( Blosc REQUIRED )
FIND_PACKAGE ( TBB CONFIG REQUIRED )
FIND_PACKAGE ( ZLIB REQUIRED )
FIND_PACKAGE ( ILMBase REQUIRED )
FIND_PACKAGE ( OpenEXR REQUIRED )

IF ( NOT OPENVDB_BUILD_HOUDINI_SOPS )

	# If we are building OpenVDB Houdini SOP, we need to use the headers
	# shipped with Houdini to ensure version compatibility
	SET(NON_SOP_INCLUDES ${Boost_INCLUDE_DIR} ${TBB_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR})

	# INCLUDE_DIRECTORIES ( ${OPENGL_INCLUDE_DIR} )
ENDIF ()

SET ( OPENVDB_LIBRARY_SOURCE_FILES
	${OPENVDB_SOURCE_DIR}/Grid.cc
	${OPENVDB_SOURCE_DIR}/MetaMap.cc
	${OPENVDB_SOURCE_DIR}/Metadata.cc
	${OPENVDB_SOURCE_DIR}/Platform.cc
	${OPENVDB_SOURCE_DIR}/openvdb.cc

	${OPENVDB_SOURCE_DIR}/io/Archive.cc
	${OPENVDB_SOURCE_DIR}/io/Compression.cc
	${OPENVDB_SOURCE_DIR}/io/File.cc
	${OPENVDB_SOURCE_DIR}/io/GridDescriptor.cc
	${OPENVDB_SOURCE_DIR}/io/Queue.cc
	${OPENVDB_SOURCE_DIR}/io/Stream.cc
	${OPENVDB_SOURCE_DIR}/io/TempFile.cc

	${OPENVDB_SOURCE_DIR}/math/Maps.cc
	${OPENVDB_SOURCE_DIR}/math/Proximity.cc
	${OPENVDB_SOURCE_DIR}/math/QuantizedUnitVec.cc
	${OPENVDB_SOURCE_DIR}/math/Transform.cc

	${OPENVDB_SOURCE_DIR}/points/AttributeArray.cc
	${OPENVDB_SOURCE_DIR}/points/AttributeArrayString.cc
	${OPENVDB_SOURCE_DIR}/points/AttributeGroup.cc
	${OPENVDB_SOURCE_DIR}/points/AttributeSet.cc
	${OPENVDB_SOURCE_DIR}/points/StreamCompression.cc
	${OPENVDB_SOURCE_DIR}/points/points.cc

	${OPENVDB_SOURCE_DIR}/util/Formats.cc
	${OPENVDB_SOURCE_DIR}/util/Util.cc
)

# SET_SOURCE_FILES_PROPERTIES ( ${OPENVDB_LIBRARY_SOURCE_FILES}
  # PROPERTIES
  # COMPILE_FLAGS "-DOPENVDB_PRIVATE -DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
# )

ADD_LIBRARY ( openvdb ${OPENVDB_LIB_TYPE}
  ${OPENVDB_LIBRARY_SOURCE_FILES}
)

TARGET_INCLUDE_DIRECTORIES( openvdb
	PUBLIC ${PROJECT_SOURCE_DIR}
	PRIVATE ${OPENVDB_PLATFORM_INCLUDES}
	PRIVATE ${NON_SOP_INCLUDES}
	PRIVATE ${ILMBASE_INCLUDE_DIRS}
	PRIVATE ${GLFW_INCLUDE_DIRECTORY}
	PRIVATE ${BLOSC_INCLUDE_DIR}	
	PRIVATE ${CPPUNIT_INCLUDE_DIR}
)

TARGET_LINK_LIBRARIES ( openvdb PUBLIC TBB::tbb ${Boost_LIBRARIES} ${PYTHON_LIBRARY} ${Ilmbase_HALF_LIBRARY} ${ZLIB_LIBRARY} ${BLOSC_blosc_LIBRARY}
)

TARGET_COMPILE_DEFINITIONS( openvdb
	PRIVATE OPENVDB_PRIVATE OPENVDB_USE_BLOSC
	PRIVATE ${OPENVDB_COMPILE_DEFS} $<$<BOOL:OPENVDB_ENABLE_3_ABI_COMPATIBLE>:OPENVDB_3_ABI_COMPATIBLE>
)

SET_TARGET_PROPERTIES(
  openvdb
  PROPERTIES
  OUTPUT_NAME openvdb
  SOVERSION ${OPENVDB_MAJOR_VERSION_NUMBER}.${OPENVDB_MINOR_VERSION_NUMBER}
  VERSION ${OPENVDB_MAJOR_VERSION_NUMBER}.${OPENVDB_MINOR_VERSION_NUMBER}.${OPENVDB_BUILD_VERSION_NUMBER}
)

# Doxygen docmentation
IF (OPENVDB_BUILD_DOCS)

  FILE ( READ ${CMAKE_CURRENT_SOURCE_DIR}/doxygen-config DOXYGEN_CONFIG_CONTENT )
  FILE ( WRITE ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config ${DOXYGEN_CONFIG_CONTENT} )
  FILE ( APPEND ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config "OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/doc\n" )

  ADD_CUSTOM_TARGET ( doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMENT "Generating API documentation with Doxygen" VERBATIM
    )

  INSTALL ( CODE "EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build  \"${PROJECT_BINARY_DIR}\" --target doc)")
  INSTALL ( DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/html DESTINATION docs)

ENDIF ()

INSTALL ( TARGETS
  openvdb
  DESTINATION
  lib
)

INSTALL ( DIRECTORY ${OPENVDB_SOURCE_DIR} DESTINATION include/openvdb
          FILES_MATCHING PATTERN "*.h")
